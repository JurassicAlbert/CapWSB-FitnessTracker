{
	"info": {
		"_postman_id": "4d36a325-4099-4565-b79f-79e6a6aa8a93",
		"name": "TrainingControllerTest",
		"description": "Postman collection to test all endpoints of TrainingController.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6434586"
	},
	"item": [
		{
			"name": "Get All Trainings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/trainings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"trainings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Trainings By User ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/trainings/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"trainings",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Finished Trainings After Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/trainings/finished/{{afterTime}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"trainings",
						"finished",
						"{{afterTime}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Trainings By Activity Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/v1/trainings/activityType?activityType={{activityType}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"trainings",
						"activityType"
					],
					"query": [
						{
							"key": "activityType",
							"value": "{{activityType}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Training",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has user id\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user.id).to.eql(parseInt(pm.environment.get(\"userId\")));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"startTime\": \"2024-04-01T11:00:00\",\r\n    \"endTime\": \"2024-04-01T12:00:00\",\r\n    \"activityType\": \"RUNNING\",\r\n    \"distance\": 10.52,\r\n    \"averageSpeed\": 8.2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/trainings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"trainings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Training",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has updated activity type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.activityType).to.eql(\"RUNNING\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": \"{{userId}}\",\r\n    \"startTime\": \"2024-04-01T10:00:00\",\r\n    \"endTime\": \"2024-04-01T11:00:00\",\r\n    \"activityType\": \"RUNNING\",\r\n    \"distance\": 0.0,\r\n    \"averageSpeed\": 0.0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/v1/trainings/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"trainings",
						"3"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "trainingId",
			"value": "1"
		},
		{
			"key": "afterTime",
			"value": "2024-05-18"
		},
		{
			"key": "activityType",
			"value": "RUNNING"
		}
	]
}